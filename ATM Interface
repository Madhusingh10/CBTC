import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class User {
    private String userId;
    private String userPin;
    private double balance;
    private List<Transaction> transactionHistory;

    public User(String userId, String userPin, double initialBalance) {
        this.userId = userId;
        this.userPin = userPin;
        this.balance = initialBalance;
        this.transactionHistory = new ArrayList<>();
    }

    public String getUserId() {
        return userId;
    }

    public boolean validatePin(String inputPin) {
        return userPin.equals(inputPin);
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        balance += amount;
        transactionHistory.add(new Transaction("Deposit", amount));
    }

    public boolean withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            transactionHistory.add(new Transaction("Withdrawal", -amount));
            return true;
        }
        return false;
    }

    public void transfer(User recipient, double amount) {
        if (withdraw(amount)) {
            recipient.deposit(amount);
            transactionHistory.add(new Transaction("Transfer to " + recipient.getUserId(), -amount));
        }
    }

    public List<Transaction> getTransactionHistory() {
        return transactionHistory;
    }
}

class Transaction {
    private String description;
    private double amount;

    public Transaction(String description, double amount) {
        this.description = description;
        this.amount = amount;
    }

    @Override
    public String toString() {
        return description + ": " + amount;
    }
}

class ATM {
    private User currentUser;

    public boolean login(String userId, String userPin, List<User> users) {
        for (User user : users) {
            if (user.getUserId().equals(userId) && user.validatePin(userPin)) {
                currentUser = user;
                return true;
            }
        }
        return false;
    }

    public void showBalance() {
        System.out.println("Your balance: " + currentUser.getBalance());
    }

    public void showTransactionHistory() {
        List<Transaction> transactions = currentUser.getTransactionHistory();
        System.out.println("Transaction History:");
        for (Transaction transaction : transactions) {
            System.out.println(transaction);
        }
    }

    public boolean withdraw(double amount) {
        return currentUser.withdraw(amount);
    }

    public void deposit(double amount) {
        currentUser.deposit(amount);
    }

    public void transfer(User recipient, double amount) {
        currentUser.transfer(recipient, amount);
    }
}

public class Main {
    public static void main(String[] args) {
        List<User> users = new ArrayList<>();
        users.add(new User("1234", "1234", 1000.0));
        users.add(new User("5678", "5678", 500.0));

        ATM atm = new ATM();
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter User ID: ");
        String userId = scanner.nextLine();
        System.out.print("Enter PIN: ");
        String userPin = scanner.nextLine();

        if (atm.login(userId, userPin, users)) {
            boolean exit = false;
            while (!exit) {
                System.out.println("\nChoose an option:");
                System.out.println("1. Show Balance");
                System.out.println("2. Show Transaction History");
                System.out.println("3. Withdraw");
                System.out.println("4. Deposit");
                System.out.println("5. Transfer");
                System.out.println("6. Exit");

                int choice = scanner.nextInt();
                scanner.nextLine();

                switch (choice) {
                    case 1:
                        atm.showBalance();
                        break;
                    case 2:
                        atm.showTransactionHistory();
                        break;
                    case 3:
                        System.out.print("Enter withdrawal amount: ");
                        double withdrawAmount = scanner.nextDouble();
                        if (atm.withdraw(withdrawAmount)) {
                            System.out.println("Withdrawal successful.");
                        } else {
                            System.out.println("Insufficient balance.");
                        }
                        break;
                    case 4:
                        System.out.print("Enter deposit amount: ");
                        double depositAmount = scanner.nextDouble();
                        atm.deposit(depositAmount);
                        System.out.println("Deposit successful.");
                        break;
                    case 5:
                        System.out.print("Enter recipient's User ID: ");
                        String recipientId = scanner.nextLine();
                        User recipient = findUserById(recipientId, users);
                        if (recipient != null) {
                            System.out.print("Enter transfer amount: ");
                            double transferAmount = scanner.nextDouble();
                            atm.transfer(recipient, transferAmount);
                            System.out.println("Transfer successful.");
                        } else {
                            System.out.println("Recipient not found.");
                        }
                        break;
                    case 6:
                        exit = true;
                        System.out.println("Thank you for using the ATM!");
                        break;
                    default:
                        System.out.println("Invalid option. Please try again.");
                }
            }
        } else {
            System.out.println("Invalid User ID or PIN. Please try again.");
        }

        scanner.close();
    }

    private static User findUserById(String userId, List<User> users) {
        for (User user : users) {
            if (user.getUserId().equals(userId)) {
                return user;
            }
        }
        return null;
    }
}
